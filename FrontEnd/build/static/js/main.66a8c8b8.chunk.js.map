{"version":3,"sources":["components/loginPage.jsx","components/signUpPage.jsx","components/indexPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","state","className","href","placeholder","type","Component","Register","Index","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAqBeA,E,4MAlBbC,MAAQ,G,uDAEN,OACE,6BACI,uBAAGC,UAAU,cAAcC,KAAK,aAAhC,YACF,0CACA,6BACA,2BAAOC,YAAY,aACnB,6BACA,2BAAOA,YAAY,WAAWC,KAAK,aACnC,6BACA,6BACA,4BAAQH,UAAU,0BAAlB,c,GAbYI,aC2BLC,E,4MA1BbN,MAAQ,G,uDAEN,OACE,6BACE,oDACA,6BACA,0CACA,gCACA,yCACA,gCACA,6CACA,gCACA,wCACA,gCACA,wCACA,2BAAOI,KAAK,aACZ,uCACA,gCACA,6BACA,6BACA,4BAAQH,UAAU,0BAAlB,uB,GArBeI,aCaRE,E,4MAZbP,MAAQ,G,uDAEN,OACE,6BACE,0CACA,6BACA,6E,GAPYK,aCoBLG,MAdf,WACE,OACI,kBAAC,IAAD,KACE,6BACE,4BAAQP,UAAU,cACd,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWJ,IACtC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,SAASC,UAAWZ,IACtC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,YAAYC,UAAWL,QCHnCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66a8c8b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Login extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n          <a className=\"navbar-link\" href=\"/register\">Register</a>\n        <h1>Login Page</h1>\n        <br></br>\n        <input placeholder=\"Username\" />\n        <br></br>\n        <input placeholder=\"Password\" type=\"password\" />\n        <br></br>\n        <br></br>\n        <button className=\"btn btn-primary btn-sm\">Login</button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass Register extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <h1>CREATE A NEW ACCOUNT</h1>\n        <br></br>\n        <h5>First name</h5>\n        <input />\n        <h5>Last name</h5>\n        <input />\n        <h5>Email address</h5>\n        <input />\n        <h5>Username</h5>\n        <input />\n        <h5>Password</h5>\n        <input type=\"password\" />\n        <h5>Country</h5>\n        <input />\n        <br></br>\n        <br></br>\n        <button className=\"btn btn-primary btn-sm\">Create Account</button>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from \"react\";\n\nclass Index extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <h1>Index Page</h1>\n        <br></br>\n        <h6>This index page has not been implemented</h6>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap-theme.min.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport './App.css';\nimport Login from './components/loginPage';\nimport Register from './components/signUpPage';\nimport Index from './components/indexPage';\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <header className=\"App-header\">\n              <Route exact path=\"/index\" component={Index}/>\n              <Route exact path=\"/login\" component={Login}/>\n              <Route exact path=\"/register\" component={Register}/>\n          </header>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}